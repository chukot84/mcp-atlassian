#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ADF –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ MCP
"""
import asyncio
import json
import sys
from typing import List, Dict, Any
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

class Colors:
    """–¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª"""
    GREEN = '\033[92m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    YELLOW = '\033[93m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(text: str) -> None:
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'='*60}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{text.center(60)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{'='*60}{Colors.END}")

def print_success(text: str) -> None:
    """–ü–µ—á–∞—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.END}")

def print_error(text: str) -> None:
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    print(f"{Colors.RED}‚ùå {text}{Colors.END}")

def print_info(text: str) -> None:
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print(f"{Colors.BLUE}‚ÑπÔ∏è  {text}{Colors.END}")

def print_warning(text: str) -> None:
    """–ü–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {text}{Colors.END}")

async def test_mcp_connection() -> List[Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MCP –°–û–ï–î–ò–ù–ï–ù–ò–Ø")
    
    try:
        print_info("–ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞
        server_params = StdioServerParameters(
            command="uv",
            args=["run", "mcp-atlassian", "--env-file", ".env"],
            env=None
        )
        
        async with stdio_client(server_params) as (read, write):
            async with ClientSession(read, write) as session:
                print_success("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
                await session.initialize()
                print_success("MCP —Å–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                tools_result = await session.list_tools()
                tools = tools_result.tools
                
                print_success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞")
                return tools
                
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MCP: {e}")
        return []

def analyze_tools(tools: List[Any]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
    print_header("–ê–ù–ê–õ–ò–ó –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    
    analysis = {
        'total': len(tools),
        'jira_tools': [],
        'confluence_tools': [],
        'adf_tools': [],
        'other_tools': []
    }
    
    for tool in tools:
        name = tool.name
        if name.startswith('jira_'):
            analysis['jira_tools'].append(name)
        elif name.startswith('confluence_'):
            analysis['confluence_tools'].append(name)
            if 'adf' in name.lower():
                analysis['adf_tools'].append(name)
        else:
            analysis['other_tools'].append(name)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print_info(f"–í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {analysis['total']}")
    print_info(f"Jira –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(analysis['jira_tools'])}")
    print_info(f"Confluence –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(analysis['confluence_tools'])}")
    print_info(f"ADF –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(analysis['adf_tools'])}")
    
    return analysis

def test_adf_tools(tools: List[Any], analysis: Dict[str, Any]) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ADF –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ADF –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    
    expected_adf_tools = [
        'confluence_get_page_adf',
        'confluence_find_elements_adf', 
        'confluence_update_page_adf'
    ]
    
    success = True
    found_tools = analysis['adf_tools']
    
    print_info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö ADF –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
    
    for expected_tool in expected_adf_tools:
        if expected_tool in found_tools:
            print_success(f"{expected_tool} - –ù–ê–ô–î–ï–ù")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            tool_info = next((t for t in tools if t.name == expected_tool), None)
            if tool_info:
                print(f"    üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tool_info.description[:80]}...")
                if hasattr(tool_info, 'inputSchema') and tool_info.inputSchema:
                    params = tool_info.inputSchema.get('properties', {})
                    print(f"    üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(params.keys())}")
        else:
            print_error(f"{expected_tool} - –ù–ï –ù–ê–ô–î–ï–ù")
            success = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ADF –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    extra_adf_tools = [tool for tool in found_tools if tool not in expected_adf_tools]
    if extra_adf_tools:
        print_info("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ADF –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
        for tool in extra_adf_tools:
            print(f"    ‚Ä¢ {tool}")
    
    return success

def print_full_tool_list(tools: List[Any], analysis: Dict[str, Any]) -> None:
    """–ü–µ—á–∞—Ç–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    print_header("–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    
    if analysis['adf_tools']:
        print(f"\n{Colors.BOLD}üÜï ADF –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ({len(analysis['adf_tools'])}){Colors.END}")
        for i, tool_name in enumerate(analysis['adf_tools'], 1):
            print(f"  {i:2d}. {Colors.GREEN}{tool_name}{Colors.END}")
    
    print(f"\n{Colors.BOLD}üîç CONFLUENCE –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ({len(analysis['confluence_tools'])}){Colors.END}")
    for i, tool_name in enumerate(analysis['confluence_tools'], 1):
        color = Colors.GREEN if 'adf' in tool_name.lower() else Colors.BLUE
        print(f"  {i:2d}. {color}{tool_name}{Colors.END}")
    
    print(f"\n{Colors.BOLD}üé´ JIRA –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ({len(analysis['jira_tools'])}){Colors.END}")
    for i, tool_name in enumerate(analysis['jira_tools'][:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        print(f"  {i:2d}. {Colors.BLUE}{tool_name}{Colors.END}")
    
    if len(analysis['jira_tools']) > 10:
        print(f"     ... –∏ –µ—â–µ {len(analysis['jira_tools']) - 10} Jira –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")

def print_summary(analysis: Dict[str, Any], adf_success: bool) -> None:
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
    print_header("–ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê")
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {analysis['total']}")
    print(f"   ‚Ä¢ Jira: {len(analysis['jira_tools'])}")
    print(f"   ‚Ä¢ Confluence: {len(analysis['confluence_tools'])}")
    print(f"   ‚Ä¢ ADF: {len(analysis['adf_tools'])}")
    
    if adf_success:
        print_success("–í–°–ï ADF –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ù–ê–ô–î–ï–ù–´ –ò –ì–û–¢–û–í–´ –ö –†–ê–ë–û–¢–ï!")
        print_info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Claude Desktop –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        print("   2. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ MCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –≤–∏–¥–Ω—ã")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ claude_desktop_config.json")
    else:
        print_error("–ù–ï–ö–û–¢–û–†–´–ï ADF –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ù–ï –ù–ê–ô–î–ï–ù–´!")
        print_warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ confluence.py")
        print("   2. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
        print("   3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤ ADF –º–æ–¥—É–ª–µ–π")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print_header("–¢–ï–°–¢ MCP ATLASSIAN ADF –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print_info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    tools = await test_mcp_connection()
    
    if not tools:
        print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤!")
        sys.exit(1)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    analysis = analyze_tools(tools)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º ADF –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    adf_success = test_adf_tools(tools, analysis)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
    print_full_tool_list(tools, analysis)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print_summary(analysis, adf_success)
    
    return 0 if adf_success else 1

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print_warning("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        print_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
